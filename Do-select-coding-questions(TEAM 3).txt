

*************************************************************DO-SELECT-CODING-QUESTIONS**************************************************************************************************



*************************************************************//question 11**************************************************************************************************
package doselectquestions;


class InvalidDaysException extends Exception
{
	public InvalidDaysException(String str)
	{
		super(str);
	}
}

class InvalidSalaryException extends Exception
{
	public InvalidSalaryException(String str)
	{
		super(str);
	}
}

class SalaryData
{
	public String name;
	public int daysInMonth;
	public double salary;
	
	public SalaryData(String name,
	 int daysInMonth,double salary)
	{
		this.name = name;
		this.daysInMonth = daysInMonth;
		this.salary = salary;
	}
}

class Validator
{
	public String validSalaryData(SalaryData s) throws 
	InvalidDaysException, InvalidSalaryException
	{
//		int a =28;
//		int b= 30;
//		int c = 31;
		
		if((s.daysInMonth>0 && s.daysInMonth<28 )|| s.daysInMonth==29)
		{
			throw new InvalidDaysException("Invalid Days");
		}
		else if (s.salary <0 || s.salary > 1000000)
		{
			throw new  InvalidSalaryException("Invalid Salary");
		}
		else
		{
			return "Valid Data";
		}
	}
	
	public double totalSalary(SalaryData s)
	{
		return s.daysInMonth*s.salary;
	}
}


public class salaryvalidatorproblemeleven {

	public static void main(String[] args) throws 
	InvalidDaysException, InvalidSalaryException
	{
		try
		{
		SalaryData s = new SalaryData("Steve",28,10000);
		Validator val = new Validator();
		String ans = val.validSalaryData(s);
		double sal =0.0;
		if(ans == "Valid Data")
		{
		 sal +=  val.totalSalary(s);
		}
		
        
       System.out.println("ans = "+ans);
       System.out.println("sal = "+sal);
		}
		catch (InvalidDaysException e)
		{
			System.out.println(e.getMessage());
		}
		
		catch (InvalidSalaryException e)
		{
			System.out.println(e.getMessage());
		}
	}

}




*************************************************************//question 12*************************************************************************************************



Java Code:
public class Student {
	String StudentID;
    String StudentName;
    
    public Student(String StudentID , String StudentName) {
    	this.StudentID=StudentID;
        this.StudentName=StudentName;
    	
    }

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub
		Student student=new Student("It_123","Sandhya");
		Source s=new Source();
        String res=s.ValidateStudent(student);
        System.out.println(res);
        String res1=s.ValidateUserId(student);
        System.out.println(res1);
	}

}

class Source{
	public String ValidateStudent(Student std) throws InvalidStudentNameException {
		
		if(!(Character.isUpperCase(std.StudentName.charAt(0)) && 
				std.StudentName.substring(1).equals(std.StudentName.substring(1).toLowerCase()))) {
			try{
                throw new InvalidStudentNameException("Invalid Name");
            }
            catch(Exception e)
            {
                //System.out.println(e);
                std.StudentName="Invalid";
                return e.toString();
            }
           
			
		}
		else
		{
			std.StudentName="Valid";
			return std.StudentName;
		}
		
	}
	
	public String ValidateUserId(Student std) throws InvalidStudentNameException {
		
		if(!(std.StudentID.matches("^[A-Z]\\w{4,19}$") && 
				std.StudentID.substring(1).equals(std.StudentID.substring(1).toLowerCase()))) {
			try{
                throw new InvalidStudentNameException("Invalid Name");
            }
            catch(Exception e)
            {
                //System.out.println(e);
            	std.StudentID="Invalid";
            	 return e.toString();
            }
           
			
		}
		else
		{
				std.StudentID="Valid";
				return std.StudentID;
		}
		
	}
}

class InvalidStudentNameException extends Exception{
	public InvalidStudentNameException(String msg) {
		super(msg);
	}
}








*************************************************************//question 13*************************************************************************************************

import java.util.*;
class Activity{
   String string1;
   String string2;
   public static Activity(String string1 , String string2)
   {
       this.string1 = string1;
       this.string2 = string2;
       this.operator = operator;
   }
}
public class Main{
    
       String str = "";
       public String handlingException(Activity a){
       try{
           if(a.operator!="+"||a.operator!="-")
           {
               if(a.string1!=null&& a.string2!=null)
               {
                   str = "None Exception found";
               }
           }
       }
       }
           catch(NullPointerException e){
               e.printStackTrace();
           }
           catch(Exception e)
           {
               e.printStackTrace();
           }
       public String doOperation(Activity a)
       {
           String stringpp1="";
           if(a.operator=="+")
           {
               stringpp1 = a.string1.concat(a.string2);
           }
           return stringpp1;
       }
       public static void main(String args[]) throws Exception{
           Scanner sc = new Scanner(System.in);
           Activity ac = new Activity("Hello ", "world" , "+");
       }
    
}





*************************************************************//question 14*************************************************************************************************



*************************************************************//question 15*************************************************************************************************



@SuppressWarnings("serial")
class TypeException extends Exception{

	@Override
	public String toString() {
		return "Vehicle Type Not Set";
	}
	
}
class Vehicles{
	String type, model_no, model_name, owner_name, owner_details;

	public Vehicles(String model_no, String model_name, String owner_name, String owner_details) {
		this.model_no = model_no;
		this.model_name = model_name;
		this.owner_name = owner_name;
		this.owner_details = owner_details;
	}

	public Vehicles() {
		
	}
	public String get_type() {
		return this.type;
	}
	public String retrieve() throws TypeException {
		return "null" ;
	}
	
}
class Car extends Vehicles{

	public Car() {
		super();
	}

	public Car(String model_no, String model_name, String owner_name, String owner_details) {
		super(model_no, model_name, owner_name, owner_details);
	}
	public String get_type() {
		return this.type;
	}
	public void set_type(String typ) {
		type=typ;
	}

	@Override
	public String retrieve() throws TypeException{
		if (this.type==null) {
			throw new TypeException();
		}
		else {
			return "[ model no. = "+this.model_no+","+" model name = "+this.model_name+","+
		" owner_name = "+this.owner_name+","+" owner_details = "+this.model_no+" ]";
		}
	}
	
	
	
}
public class Q15 {

	public static void main(String[] args) {
		Car c = new Car("1205", "Ford", "Sam", "California");
		c.set_type("SUV");
		try {
			System.out.println(c.retrieve());
		} catch (TypeException e) {
			System.out.println(e.toString());
		}
	}

}



